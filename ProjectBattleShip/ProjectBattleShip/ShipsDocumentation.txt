#ifndef _SHIPS
#define _SHIPS

#pragma once
#include<Windows.h>
#include"_BitMapObj.h"
//#include"ShipTiles.h"

const int WATER = 0, HIT = 1, MISS = 2;
const int SUBMARINE1 = 3, SUBMARINE2 = 4, SUBMARINE3 = 5;
const int SUBMARINE1h = 6, SUBMARINE2h = 7, SUBMARINE3h = 8;
const int STEEL = 9;
const int CARRIER1 = 10, CARRIER2p = 11, CARRIER3p = 12, CARRIER4 = 13, CARRIER5 = 14;
const int CARRIER1h = 15, CARRIER2h = 16, CARRIER3h = 17, CARRIER4h = 18, CARRIER5h = 19;
const int CARRIER2np = 28, CARRIER3np = 29;
const int BTLSHIP1 = 20, BTLSHIP2 = 21, BTLSHIP3 = 22, BTLSHIP4 = 23;
const int BTLSHIP1h = 24, BTLSHIP2h = 25, BTLSHIP3h = 26, BTLSHIP4h = 27;
const int CRUISER1 = 30, CRUISER2 = 31, CRUISER3 = 32;
const int CRUISER1h = 33, CRUISER2h = 34, CRUISER3h = 35;
const int PATROLLER1 = 36, PATROLLER2 = 37, PATROLLER1h = 38,PATROLLER2h = 39;

class Ship 
{
public:
	virtual void SpecialAttack() = 0;
	virtual void SpecialAction() = 0;
	virtual POINT getpos() = 0;
	virtual void Draw(int PlacementGrid[][11]) = 0;
	void Rotate();
};

class Carrier : public Ship
{
public:
	//Carrier();
	virtual void SpecialAttack();
	virtual void SpecialAction();
	virtual POINT getpos();
	virtual void Draw(int PlacementGrid[][11]);
private:
	class Plane
	{
	public:
		void Scout();
		void Return();
	};
	POINT pos;
	BitMapObj Source;
	bool positioned;
	int Graphic[5];
};

class BattleShip : public Ship
{
public:
	virtual void SpecialAttack();
	virtual void SpecialAction();
	virtual POINT getpos();
	virtual void Draw(int PlacementGrid[][11]);
private:
	POINT pos;
	BitMapObj graphic;
	bool positioned;
	int Graphic[4];
};

class Destroyer : public Ship
{
public:
	virtual void SpecialAttack();
	virtual void SpecialAction();
	virtual POINT getpos();
	virtual void Draw(int PlacementGrid[][11]);
private:
	POINT pos;
	BitMapObj graphic;
	bool positioned;
	int Graphic[3];
};

class Submarine : public Ship
{
public:
	virtual void SpecialAttack();
	virtual void SpecialAction();
	virtual POINT getpos();
	virtual void Draw(int PlacementGrid[][11]);
private:
	POINT pos;
	BitMapObj graphic;
	bool positioned;
	int Graphic[3];
};

class Patroller : public Ship
{
public:
	virtual void SpecialAttack();
	virtual void SpecialAction();
	virtual POINT getpos();
	virtual void Draw(int PlacementGrid[][11]);
private:
	POINT pos;
	BitMapObj graphic;
	bool positioned;
	int Graphic[2];
};


#endif



#include"Ships.h"


void Ship::Rotate()
{

}

Carrier::Carrier()
{
	Source.Load(NULL, (LPCSTR) "tiles.bmp");
	for(int i = 0; i < 5; i++)
		Graphic[i] = CARRIER1+i;
	positioned = false;

}
void Carrier::Draw(int PlacementGrid[][11])
{
	int i, j;
	for(i=1; i<11; i++)//Check where the boat can be initialized.
	{
		for(j=1;j<11;j++)
		{
			if(PlacementGrid[i][j] != WATER)
				continue;//if boat can't be placed here check next area
			else//If tile does not have a boat, Check Areas next to tile for boats
			{
				int tempi = i;
				int newi;
				if(PlacementGrid[i-1][j] != WATER && PlacementGrid[i+1][j] == WATER)
				{//the boat can't go up so go down
					i = i+4;
					while(i > tempi)
					{
						if(PlacementGrid[i][j] != WATER)
						{
							newi = i+1;
							i = tempi-1;
						}
						i--;
					}
					if(i==tempi)
					{//boat can be initialized
						int end = i+4,k;
						for(i,j,k=0; i<end;i++,k++)
							PlacementGrid[i][j] = Graphic[k];
						pos.x = j;
						pos.y = end-2;
						break;
					}
					else
					{//boat can't be initialized
						i = newi;
						j = j-1;
						continue;
					}
				}
				else if(true)
					;
			}
		}
	}
	
}